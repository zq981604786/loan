[package]
name = "loan"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
yew = { version = "0.20.0", features = ["csr"] }
yew-router = "0.17.0"
gloo = "0.8.1"
wasm-bindgen-futures = "0.4"
js-sys = "0.3.64"

chrono = { version = "*", features = ["serde"] }
clap = { version = "4.3.11", features = ["derive"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
rust_decimal = "1.11"
loan-macros = {path="./loan-macros"}
loan-trait = {path="./loan-trait"}
#[dev-dependencies]
#在 Rust 的 Cargo 构建系统中，`[dependencies]` 和 `[dev-dependencies]` 是两个不同的部分，用于指定不同类型的依赖项。
#
#- `[dependencies]`：这部分用于指定项目的运行时依赖项，也就是在实际的代码中使用的依赖项。这些依赖项将被包含在最终构建的可执行文件或库中，并在运行时使用。
#
#- `[dev-dependencies]`：这部分用于指定项目的开发时依赖项，也就是在开发过程中使用的依赖项。这些依赖项通常是测试框架、文档生成工具、代码检查工具等，用于辅助开发、测试和文档编写。这些依赖项不会包含在最终构建的可执行文件或库中。
#
#通过将依赖项分为 `[dependencies]` 和 `[dev-dependencies]`，Cargo 可以根据项目的不同需求来管理和构建依赖项。在构建项目时，Cargo 会自动下载和构建 `[dependencies]` 和 `[dev-dependencies]` 中指定的依赖项。
#
#请注意，`[dev-dependencies]` 中的依赖项不会在实际的代码中使用，因此无法在代码中直接引用这些依赖项的模块、宏或函数。如果你想在代码中使用一个宏或函数，你应该将它添加到 `[dependencies]` 部分。

[dependencies.web-sys]
version = "0.3.64"
features = ["console", "Element", "DomTokenList", "DomRect", "HtmlElement", "HtmlInputElement", "HtmlTextAreaElement", "CssStyleDeclaration", "MouseEvent", "IdbFactory", "IdbOpenDbRequest", "IdbRequest", "IdbTransaction", "IdbDatabase", "IdbObjectStore", "IdbIndex", "IdbTransactionMode", "IdbObjectStoreParameters", "IdbCursorWithValue", "IdbCursorDirection", "IdbKeyRange", "Navigator", "Headers", "Request", "RequestInit", "RequestMode", "Response"]

#[workspace]
#members = [
#    "loan-macros",
#    "loan-trait"
#]

[workspace.dependencies]
#loan_macros = {path="./loan-macros"}


#在Cargo的Cargo.toml文件中,`[workspace]`下的`dependencies`和根级的`[dependencies]`有以下主要区别:
#
#1. 工作空间依赖(`workspace.dependencies`)会应用到整个工作空间的所有的子crate。
#
#2. 普通依赖(`dependencies`)只会应用到当前的crate。
#
#也就是说,如果你想要某个依赖应用到工作空间下的所有的crate,应该把它放到`[workspace]`下。
#
#如果只需要应用到当前crate,则放在`[dependencies]`中。
#
#例如:
#
#```toml
#[workspace]
#members = ["a", "b"]
#
#[dependencies]
#rand = "0.8"
#
#[workspace.dependencies]
#serde = "1.0"
#```
#
#这里`serde`会作用在a和b两个子crate上。
#
#而`rand`只作用在当前的crate(比如是a)上。
#
#此外,`dev-dependencies`也有类似的区别。
#
#总结:
#
#- workspace: 作用域所有子crate
#- dependencies: 只作用在当前crate
#
#根据包的依赖范围选择合适的配置。